<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lllhh685.github.io</id>
    <title>lnuBlog</title>
    <updated>2020-11-12T15:31:20.911Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lllhh685.github.io"/>
    <link rel="self" href="https://lllhh685.github.io/atom.xml"/>
    <subtitle>keep trying</subtitle>
    <logo>https://lllhh685.github.io/images/avatar.png</logo>
    <icon>https://lllhh685.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, lnuBlog</rights>
    <entry>
        <title type="html"><![CDATA[整理部分面经]]></title>
        <id>https://lllhh685.github.io/post/zheng-li-bu-fen-mian-jing/</id>
        <link href="https://lllhh685.github.io/post/zheng-li-bu-fen-mian-jing/">
        </link>
        <updated>2020-11-12T15:12:00.000Z</updated>
        <content type="html"><![CDATA[<p>阿里</p>
<hr>
<ol>
<li>
<p>Java 中垃圾回收机制中如何判断对象需要回收？常见的 GC 回收算法有哪些？</p>
<p>引用计数法：在对象中添加一个引用计数器，有一个地方引用它，计数值加一；引用失效时，计数器值减一；计数器为零的对象不再被使用</p>
<p>可达性分析算法：</p>
<p>通过称为 &quot;GC Roots&quot; 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径成为 &quot;引用链&quot;，如果某个对象到 GC Roots 间没有任何引用链相连，此对象不可能再被使用</p>
<p>GC Roots对象</p>
<ul>
<li>在虚拟机栈 (栈帧中的本地变量表) 中引用的对象，譬如各个线程被调用的方法栈中使用到的参数、局部变量、临时变量</li>
<li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量</li>
<li>在方法区中常量引用的对象，譬如字符串常量池里的引用</li>
<li>在本地方法栈中JNI (通常所说的Native方法) 引用的对象</li>
<li>Java虚拟机内部的引用</li>
<li>所有被同步锁持有的对象</li>
<li>...</li>
</ul>
<img src="https://i.imgur.com/xeKfNyU.png =" style="zoom:40%;" />
<p><a href="https://xiaogenban1993.github.io/19.09/java_jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.html">G1收集</a></p>
</li>
<li>
<p>简述 Synchronized，Volatile，可重入锁的不同使用场景及优缺点</p>
</li>
<li>
<p>synchronized 关键字底层是如何实现的？它与 Lock 相比优缺点分别是什么？</p>
<p>synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p>
<p><a href="https://tech.meituan.com/2018/11/15/java-lock.html">参考</a>，lock接口是可以显示释放锁，但是synchronized是隐式释放锁</p>
</li>
<li>
<p>JVM 中内存模型是怎样的，简述新生代与年老代的区别？</p>
</li>
<li>
<p>简述 Spring AOP 的原理</p>
</li>
<li>
<p>实现单例设计模式（懒汉，饿汉）</p>
<pre><code class="language-java">饿汉式
public class Hungry {
    private static Hungry instance = new Hungry();
    private Hungry() {

    }
    public static Hungry newInstance() {
        return instance;
    }
}
懒汉式
public class Slug {
    private static Slug instance = null;
    private Slug() {

    }
    public static Slug newInstance() {
        if(instance == null) {
            instance = new Slug();
        }
        return instance;
    }
}
</code></pre>
</li>
<li>
<p>简述 ArrayList 与 LinkedList 的底层实现以及常见操作的时间复杂度</p>
<pre><code class="language-java">ArrayList
private static final Object[] EMPTY_ELEMENTDATA = {};
private static final int DEFAULT_CAPACITY = 10;
int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);
查找O(n)
LinkedList
Node节点，链表 查找O(1)
</code></pre>
</li>
<li>
<p>Java 类的加载流程是怎样的？什么是双亲委派机制？</p>
<p>类加载生命周期：</p>
<img src="http://fatfei.oss-cn-beijing.aliyuncs.com/1560087007.jpg" style="zoom:45%;" />
<p>初始化阶段时机</p>
<ol>
<li>遇到new、getstatic、putstatic 或 invokestatic这四条字节码指令，如果类型没有初始化，需先触发初始化阶段
<ul>
<li>使用new实例化对象</li>
<li>读取或设置一个类型的静态字段 (被final 修饰、已在编译期把结果放入常量池的静态字段除外) 的时候</li>
<li>调用一个类型的静态方法的时候</li>
</ul>
</li>
<li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行初始化需先触发初始化</li>
<li>当初始化类的时候，父类没有初始化，先触发父类的初始化</li>
<li>虚拟机启动时，用户需指定一个要执行的主类 (包含main()方法的那个类) 虚拟机先初始化这个主类</li>
<li>还有两点见第三版p264</li>
</ol>
<p>类加载过程，完整第三版p267</p>
<ul>
<li>
<p>加载</p>
<p>通过类全限定名获取类的二进制字节流</p>
<p>将字节流代表的静态存储结构转化为方法区的运行时数据结构</p>
<p>在内存中生产代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p>
</li>
<li>
<p>验证</p>
<p>文件格式验证：验证字节流是否符合class文件格式规范并且能被当前版本的虚拟机处理，基于二进制字节流，通过验证后字节流允许进入java虚拟机的方法区进行存储</p>
<p>元数据验证：对字节码描述的信息进行语义分析</p>
<p>字节码验证：通过数据流分析和控制流分析确定程序语义是合法的、符合逻辑的</p>
<p>符号引用验证：发生在符号引用转化为直接引用时，转化动作发生在连接的第三阶段--解析阶段</p>
</li>
<li>
<p>准备</p>
<p>正式为类中定义的变量 (静态变量) 分配内存并设置类变量初始值的阶段</p>
</li>
<li>
<p>解析</p>
<p>java虚拟机将常量池内的符号引用替换为直接引用的过程</p>
</li>
<li>
<p>初始化</p>
<p>执行类构造器<clinit>()方法的过程</p>
</li>
</ul>
<p>双亲委派模型</p>
<p>双亲委派模型要求除了顶层的启动类加载器外，其余类加载器都应有自己的父类加载器，类加载器之间的父子关系通常使用组合关系复用父类加载器的代码</p>
<p>工作过程：如果一个类加载器收到了类加载的请求，把请求委派给父类加载器去完成，每层类加载器都是如此，所有的加载请求最终都应传送到最顶层的启动类加载器中，只有当父类加载器反馈自己无法完成加载请求时，子加载器才会尝试自己去完成加载<br>
<a href="https://img-blog.csdn.net/20160506184936657">图片</a><br>
破坏双亲委派模型</p>
<p>第一次破坏：jdk1.2前 (双亲委派模型出现在jdk1.2之后)</p>
<p>第二次破坏：模型自身缺陷</p>
<p>第三次破环：用户对程序动态性的追求导致</p>
</li>
<li>
<p>简述 Java 的反射机制</p>
<p>可以动态操控java代码的程序，有分析类的能力</p>
</li>
<li>
<p>Java 中 sleep() 与 wait() 的区别</p>
<p>调用wait()方法，调用线程会被阻塞并释放锁，应在同步代码块中调用，能够被notify和notifyAll线程唤醒</p>
<p>Thread.sleep()方法是一个静态方法，针对线程，不能被notify方法唤醒</p>
</li>
<li>
<p>String 类能不能被继承？为什么？</p>
<p>final修饰，不能继承；不存在线程安全问题，语义合理</p>
<p><a href="http://dengchengchao.com/?p=1096">参考</a></p>
</li>
<li>
<p>hashcode 和 equals 方法的联系</p>
<p>调用equals返回true的两个对象具有相等的哈希码</p>
<p>如果两个对象的hashcode返回值相同，调用equals方法不一定返回true</p>
</li>
<li>
<p>Spring MVC 的原理和流程</p>
<ol>
<li>DispatcherServlet拦截请求</li>
<li>调用处理器映射器HandlerMapping</li>
<li>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain</li>
<li>执行处理器Controller</li>
<li>完成返回ModelAndView</li>
<li>传给ViewReslover视图解析器</li>
<li>返回视图</li>
</ol>
<p><a href="https://www.javazhiyin.com/33187.html">参考</a></p>
</li>
<li>
<p>Java 缓冲流 buffer 的用途和原理是什么</p>
<p>利用数组进行数据缓冲，进行IO操作时使用可提高效率</p>
<p><a href="https://developer.ibm.com/zh/articles/j-lo-javaio/">参考</a></p>
</li>
<li>
<p>生产者消费者模型</p>
</li>
<li>
<p>Linux 下如何排查 CPU 以及 内存占用过多</p>
<p>top命令</p>
</li>
<li>
<p>正在运行的进程，某个端口对应的进程</p>
<p>netstat | grep端口号</p>
</li>
<li>
<p>MySQL 为什么使用 B+ 树来作索引，对比 B 树它的优点和缺点是什么？</p>
<p>主键索引&lt;id, row&gt;，辅助索引&lt;index, id&gt;</p>
<p>主键索引中，<code>id</code> 是主键，我们能够通过 <code>id</code> 找到该行的全部列</p>
<p>辅助索引中，索引中的几个列构成了键，我们能够通过索引中的列找到 <code>id</code>，如果有需要的话，可以再通过 <code>id</code> 找到当前数据行的全部内容；</p>
<p>B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。</p>
</li>
<li>
<p>数据库的事务隔离级别有哪些？各有哪些优缺点？</p>
<p>未提交读--脏读，已提交读--不可重复读，可重复读--幻读，可串行化</p>
</li>
<li>
<p>简述乐观锁以及悲观锁的区别以及使用场景</p>
<p>悲观锁：每次获取数据的时候都会进行加锁，确保在自己使用的过程中数据不会被别人修改，使用完成后进行数据解锁，适合写入操作比较频繁的场景</p>
<p>乐观锁：每次获取数据的时候，都不会担心数据被修改，所以每次获取数据的时候都不会进行加锁，但是在更新数据的时候需要判断该数据是否被别人修改过。适合读取操作比较频繁的场景</p>
</li>
<li>
<p>简述脏读和幻读的发生场景，InnoDB 是如何解决幻读的</p>
<p>脏读：事务读取未提交的数据</p>
<p>不可重复读：前后多次读取，数据内容不一致</p>
<p>幻读：前后多次读取，数据总量不一致</p>
<p>间隙锁解决幻读，间隙锁锁定查询的涉及的行，还会对索引中间的间隙进行锁定，防止幻影行的插入</p>
</li>
<li>
<p>简述 Redis 持久化中 rdb 以及 aof 方案的优缺点</p>
<p>rdb (redis database)：在指定的时间间隔内将内存中的数据集快照写入磁盘，RDB的缺点是最后一次持久化后的数据可能丢失</p>
<p>aof (append only file)：日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件</p>
<p>但不可以改写文件，缺点：aof 默认就是文件的无限追加，文件会越来越大</p>
</li>
<li>
<p>数据库查询中左外连接和内连接的区别是什么</p>
<p>内连接结果取交集，外连接结果取并集</p>
</li>
<li>
<p>数据库的读写分离的作用是什么？如何实现？</p>
<p>让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。减少数据库压力，提高性能</p>
</li>
<li>
<p>简述 Redis 中跳表的应用以及优缺点</p>
</li>
<li>
<p>Redis的缓存淘汰策略有哪些？</p>
<p>volatile-lru：从设置过期的数据集中淘汰最少使用的 key</p>
<p>volatile-ttl：从设置过期的数据集中淘汰即将过期的 key</p>
<p>volatile-random：从设置过期的数据集中随机选取 key 淘汰</p>
<p>allkeys-lru：从所有的数据集中选取最少使用的数据</p>
<p>allkyes-random：从所有的数据集中任意选取数据淘汰</p>
<p>no-envicition：不进行淘汰</p>
</li>
<li>
<p>Redis 如何实现分布式锁？</p>
<p><a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/">参考</a></p>
</li>
<li>
<p><s>Redis 序列化有哪些方式？</s></p>
</li>
<li>
<p>简述 MySQL 三种日志的使用场景</p>
<p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎</p>
<p>都可以使用。</p>
<p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日</p>
<p>志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p>
<p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指</p>
<p>binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志</p>
</li>
<li>
<p>模糊查询是如何实现的？</p>
</li>
<li>
<p>sentine l和 cluster 的区别和适用场景是什么？</p>
</li>
<li>
<p>为什么 Redis 在单线程下能如此快？</p>
<p>严格来说，Redis Server是多线程的，只是它的请求处理整个流程是单线程处理的。</p>
<p>Redis是一个KV内存数据库，操作都在内存中进行，并不会大量消耗CPU资源，所以速度极快</p>
<p>单线程模型没有了多线程上下文切换的性能损耗</p>
<p>Redis 6.0，Redis又引入了多线程来完成请求数据的协议解析，进一步提升性能。它主要是解决高并发场景下，单线程解析请求数据协议带来的压力。请求数据的协议解析由多线程完成之后，后面的请求处理阶段依旧还是单线程排队处理。https://img-blog.csdn.net/20160506184936657</p>
</li>
</ol>
<p><a href="https://www.shanruifeng.win/">GC Roots photo参考链接</a></p>
<p><a href="https://huija.github.io/2018/12/06/Interview-problems/">面试题连接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL]]></title>
        <id>https://lllhh685.github.io/post/mysql/</id>
        <link href="https://lllhh685.github.io/post/mysql/">
        </link>
        <updated>2020-10-03T12:17:01.000Z</updated>
        <summary type="html"><![CDATA[<p>mysql的一些命令</p>
]]></summary>
        <content type="html"><![CDATA[<p>mysql的一些命令</p>
<!-- more -->
<hr>
<ol>
<li>
<p>删除数据库</p>
<pre><code class="language-mysql">drop database 数据库名;
</code></pre>
</li>
<li>
<p>数据库表</p>
<ul>
<li>
<p>查看表结构</p>
<pre><code class="language-mysql">desc 表名;
show create table 表名;
</code></pre>
</li>
<li>
<p>删除表</p>
<pre><code class="language-mysql">drop table 表名;
</code></pre>
</li>
<li>
<p>数据库表修改名字</p>
<pre><code class="language-mysql">alter table 原表名 rename [to] 新名;
rename table 原表名 to 新名;
</code></pre>
</li>
<li>
<p>增加字段</p>
<pre><code class="language-mysql">alter table 表名 add 列名 数据类型 约束; (最后一列)
alter table 表名 add 列名 数据类型 约束 first; (第一列)
alter table 表名 add 列名 数据类型 约束 after 列名; (在指定字段后增加字段)
</code></pre>
</li>
<li>
<p>删除字段</p>
<pre><code class="language-mysql">alter table 表名 drop 列名;
</code></pre>
</li>
<li>
<p>修改字段</p>
<pre><code class="language-mysql">alter table 表名 modify 列名 新数据类型; (修改表字段类型)
alter table 表名 change 原列名 新列名 原列名类型值; (修改表字段名)
alter table 表名 change 原列名 新列名 新列名类型值; (修改表字段名和类型值)
</code></pre>
</li>
</ul>
</li>
<li>
<p>约束</p>
<ul>
<li>
<p>主键约束</p>
<pre><code class="language-mysql">单一主键
字段名 类型名 primary key,
为主键设置主键名
constraint 主键名 primary key (字段名)
多字段主键
constraint 主键名 primary key (字段1, 字段2)
</code></pre>
</li>
<li>
<p>外键约束</p>
<pre><code class="language-mysql">constraint 外键名 foreign key (外键) references 表名(参考表的参考字段)  
</code></pre>
</li>
</ul>
</li>
<li>
<p>单表查询</p>
<ul>
<li>
<p>去重查询</p>
<pre><code class="language-mysql">select distinct fiele1 ... from 表名
</code></pre>
</li>
<li>
<p>带AND或OR的多条件查询</p>
<pre><code class="language-mysql">select field1 ... from tablename where condition1 and condition2 ...
select field1 ... from tablename where condition1 or condition2 ...
</code></pre>
</li>
<li>
<p>对查询结果进行排序</p>
<pre><code class="language-mysql">select field1 ... from tablename order by fieldm [ASC|DESC]
ASC 升序(默认)
DESC 降序
</code></pre>
</li>
<li>
<p>统计函数</p>
<pre><code class="language-mysql">select function(field) from tablename where condition 
count(*) 不会忽略NULL值
count(field) 会忽略NULL值
avg(field) 会忽略NULL值
</code></pre>
</li>
<li>
<p>LIMIT限制</p>
<pre><code class="language-mysql">select field ... from tablename where condition limit offset_start, row_count;
</code></pre>
</li>
</ul>
</li>
<li>
<p>select子句顺序</p>
<table>
<thead>
<tr>
<th style="text-align:center">子句</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">是否必须使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SELECT</td>
<td style="text-align:center">要返回的列或表达式</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">FROM</td>
<td style="text-align:center">从中检索数据的表</td>
<td style="text-align:center">仅在从表中选择数据时使用</td>
</tr>
<tr>
<td style="text-align:center">WHERE</td>
<td style="text-align:center">行级过滤</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">GROUP BY</td>
<td style="text-align:center">分组说明</td>
<td style="text-align:center">仅在按组计算聚焦时使用</td>
</tr>
<tr>
<td style="text-align:center">HAVING</td>
<td style="text-align:center">组级过滤</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">ORDER BY</td>
<td style="text-align:center">输出排序顺序</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">LIMIT</td>
<td style="text-align:center">要检索的行数</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>多表查询</p>
<ul>
<li>
<p>内连接查询</p>
<pre><code class="language-mysql">select field1, ... from tablename1 inner join tablename2 on condition [inner join tablenamen on condition]
</code></pre>
</li>
<li>
<p>外连接查询</p>
<ul>
<li>
<p>左外连接</p>
<pre><code class="language-mysql">select field1, ... from tablename left join tablename2 on condition
新关系匹配条件时,以关键字 LEFT JOIN 左边的表为参考表,左外连接的结果包括 LEFT OUTER 子句中指定的左表的所有行,如果左表的某行在右表中没有匹配行,在相关联的查询结果中,右表的选择列表均为 NULL
</code></pre>
</li>
<li>
<p>右外连接</p>
<pre><code class="language-mysql">select field1, ... from tablename right join tablename2 on condition
新关系执行匹配条件时,以关键字 RIGHT JOIN 右边的表为参考表
</code></pre>
</li>
<li>
<p>合并查询数据记录</p>
<pre><code class="language-mysql">select field1, ... from tablename1 union | union all select field1, ... from tablename2
关键字 union 会把查询结果集合并在一起,同时去掉重复的数据记录
关键字 union all 会把查询结果直接合并在一起
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>子查询</p>
<ul>
<li>
<p>带关键字 EXISTS 的子查询</p>
<pre><code class="language-mysql">关键字 EXISTS 表示存在,后面的参数是一个任意的子查询,系统对子查询进行运算判断是否返回行,若至少返回一行
EXISTS 返回的结果为 true ,外层语句将进行查询
</code></pre>
</li>
<li>
<p>带关键字 ANY 的子查询</p>
<pre><code class="language-mysql">关键字 ANY 表示满足其中任一条件, 只要满足内层查询语句返回的结果中的任何一个,就可以通过该条件来执行外层查询语句
</code></pre>
</li>
</ul>
</li>
<li>
<p>索引</p>
<p>mysql的存储引擎对每个表至少支持16个索引，总索引长度至少为256字节</p>
<ul>
<li>
<p>普通索引</p>
<pre><code class="language-mysql">create table tablename (
	propname type,
	...
    [UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY [indexname] (propname [(length)] [ASC|DESC])
);

create index indexname on tablename (propname [(length)] [ASC | DESC]);
propname指定索引对应字段的名称, length是可选参数,表示索引长度,必须是字符串类型才可以使用, ASC表示升序排列

ALTER TABLE tablename ADD INDEX|KEY indexname (propname [(length) [ASC|DESC]]);
</code></pre>
</li>
<li>
<p>唯一索引</p>
<pre><code class="language-mysql">create table tablename (
	propname type,
	...
    UNIQUE INDEX|KEY [indexname] (propname [(length)] [ASC|DESC])
);

create UNIQUE index indexname on tablename (propname [(length)] [ASC | DESC]);

ALTER TABLE tablename ADD UNIQUE INDEX|KEY indexname (propname [(length) [ASC|DESC]]);
</code></pre>
</li>
<li>
<p>删除索引</p>
<pre><code class="language-mysql">drop index indexname on tablename;
</code></pre>
</li>
</ul>
</li>
<li>
<p>事务和锁</p>
<p><a href="https://www.yuque.com/yinjianwei/vyrvkf/cl4weh">事务参考</a></p>
<p><a href="https://www.yuque.com/yinjianwei/vyrvkf/ei0mep">锁参考</a></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾收集器与内存分配策略]]></title>
        <id>https://lllhh685.github.io/post/lajishouji/</id>
        <link href="https://lllhh685.github.io/post/lajishouji/">
        </link>
        <updated>2020-10-03T11:57:12.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>Java内存运行区域的什么需要垃圾回收</p>
<p>Java堆和方法区</p>
</li>
<li>
<p>判断对象是否存在</p>
<p>采用的可达性分析算法，如果对象到GC Roots间没有引用链相连，或用图论从GC Roots到这个对象不可达，证明对象不可能再被使用</p>
<p>即使可达性判定为不可达，仍需要两次标记，第一次标记就是判断是否有与GC Roots相连接的引用链</p>
</li>
<li>
<p>引用</p>
<p>JDK1.2之后，将引用分为强引用、软引用、弱引用、虚引用，强度依次减弱</p>
</li>
<li>
<p>方法区回收的对象</p>
<p>废弃的常量和不再使用的类型</p>
<p>常量：如果字符串&quot;Java&quot;已进入常量池，但是系统没有字符串对象的值是&quot;Java&quot;（没有字符串对象引用常量池中的&quot;Java&quot;常量，虚拟机没有其他地方引用这个字面量），如果发生内存回收，垃圾收集器判断有必要的话，&quot;Java&quot;常量会被清理出常量池</p>
</li>
<li>
<p>垃圾收集算法</p>
<p>分<s>引用计数式垃圾收集</s>(主流不采用)和追踪式垃圾收集</p>
</li>
<li>
<p>分代收集理论：</p>
<p>假说：</p>
<ol>
<li>弱分代假说 绝大数对象式朝生熄灭的</li>
<li>强分代假说 熬过越多次垃圾收集过程的对象越难以消亡</li>
<li>跨代引用假说 跨代引用相对于同代引用来说占极少数</li>
</ol>
<p>Java堆划分为新生代和老年代两个区域，在新生代中，每次垃圾收集发现大批对象死去，每次回收后存活的少量对象逐步晋升到老年代中存放</p>
</li>
<li>
<p>垃圾收集算法思想</p>
<ol>
<li>
<p>标记清除算法</p>
<p>分为标记和清楚两个阶段，首先标记所有需要回收的对象，标记完成后，统一回收所有被标记的对象，也可以标记存活的对象，统一回收未被标记的对象。标记过程就是对象是否属于垃圾的判定过程</p>
<p>缺点 执行效率不稳定（进行大量回收时，需要进行大量标记和清除的动作，效率会降低），内存空间碎片化</p>
</li>
<li>
<p>标记复制算法</p>
<p>把新生代分为较大的Eden空间和两块较小Survivor空间，每次分配内存只使用Eden和其中一块Survivor，发生垃圾收集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间，然后直接清理掉Eden和已使用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor大小比例时8:1，存在逃生门的安全设计。</p>
</li>
<li>
<p>标记整理算法</p>
<p>标记后将所有存活对象移向内存空间的一端，直接清理掉边界以外的内存，是移动式的算法</p>
</li>
<li>
<p>分代收集算法</p>
<p>根据对象存活周期的不同将内存划分为几块。一般是把java堆分为新生代和老年代，新生代中，每次垃圾收集有大量对象死去，使用复制算法，老年代对象存活率高使用标记清理或标记整理算法进行回收</p>
</li>
</ol>
</li>
<li>
<p>垃圾收集器</p>
<figure data-type="image" tabindex="1"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg" alt="" loading="lazy"></figure>
<ol>
<li>
<p>Serial收集器，单线程工作收集器。简单高效</p>
<figure data-type="image" tabindex="2"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/22fda4ae-4dd5-489d-ab10-9ebfdad22ae0.jpg" alt="" loading="lazy"></figure>
</li>
<li>
<p>ParNew收集器，同时使用多条线程进行垃圾收集，其余行为与Serial收集器完全一致</p>
<figure data-type="image" tabindex="3"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/81538cd5-1bcf-4e31-86e5-e198df1e013b.jpg" alt="" loading="lazy"></figure>
<p>除Serial收集器外，只有它能与CMS收集器配合工作</p>
</li>
<li>
<p>Parallel Scavenge收集器</p>
<p>吞吐量计算：运行代码时间   /（运行代码时间和运行垃圾收集时间）</p>
<p>目标是达到可控制的吞吐量，控制最大垃圾收集停顿时间 -XX：MaxGCPauseMillis，直接设置吞吐量大小的-XX：GCTimeRatio。</p>
<p>-XX：MaxGCPauseMillis 允许值是一个大于0的毫秒数，</p>
</li>
<li>
<p>Serial Old收集器</p>
<p>Serial收集器的老年代版本，使用标记整理算法，供客户端模式下的HotSpot虚拟机使用，服务端：JDK5以及以前与Parallel Scavenge收集器搭配使用</p>
</li>
<li>
<p>Parallel Old收集器</p>
</li>
<li>
<p>CMS收集器</p>
<p>以获取最短回收停顿时间为目标的收集器，整个过程分四个步骤</p>
<ol>
<li>初始标记：标记GC Roots能直接关联到的对象</li>
<li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，耗时较长无需停顿用户线程</li>
<li>重新标记：修正并发标记期间变动对象的标记记录</li>
<li>并发清除：清理删除标记阶段的判断已死亡的对象</li>
</ol>
<p>优点：并发收集、低停顿</p>
<p>缺点：吞吐量低、产生浮动垃圾（产生的垃圾对象待下一次垃圾收集时清理）、产生空间碎片，不得不提前触发一次Full GC</p>
</li>
<li>
<p>Garbage First收集器</p>
<p><img src="https://miro.medium.com/max/875/0*NzhXk29lJrjsTJ5p" alt="分代垃圾收集堆内存分布" loading="lazy">分代垃圾收集堆内存分布</p>
<p><img src="https://miro.medium.com/max/875/0*TdP79cqPt_HOXPJn" alt="" loading="lazy">G1垃圾收集堆内存分布</p>
<p><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html">官方指导</a></p>
</li>
</ol>
</li>
<li>
<p>内存分配策略</p>
<ol>
<li>大多数情况下，对象在新生代Eden区中分配，当Eden区没有足够空间进行分配时，发起一次Minor GC</li>
</ol>
</li>
</ul>
<ol start="2">
<li>需要大量连续内存空间的Java对象(如很长的字符串，元素数量庞大的数组)，大对象直接进入老年代</li>
<li>长期存活的对象进入老年代</li>
<li>动态对象年龄判断，为了适应不同程序的内存状况，虚拟机并不是永远的要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄对象就可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄</li>
<li>空间分配担保，在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。如果不成立，虚拟机则会查看 HandlePromotionFailure 设置值是否允许担保失败。如果允许，则会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于将尝试着进行一次 Minor GC，尽管这次 GC 是有风险的。如果小于，或者 HandlePromotionFailure 设置不允许冒险，则会进行 Full GC。</li>
</ol>
<ul>
<li>
<p>Minor GC 与 Full GC</p>
<p><a href="https://juejin.im/post/6844903669251440653">参考连接</a></p>
</li>
</ul>
]]></content>
    </entry>
</feed>